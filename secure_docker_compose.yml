version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: chatting_platform
      POSTGRES_USER: adam@2025@man
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adam@2025@man"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"  # Only accessible from localhost
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AI_MODEL_URL=${AI_MODEL_URL}
      - AI_MODEL_AUTH_USERNAME=${AI_MODEL_AUTH_USERNAME}
      - AI_MODEL_AUTH_PASSWORD=${AI_MODEL_AUTH_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - TALLY_WEBHOOK_SECRET=${TALLY_WEBHOOK_SECRET}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - internal_network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AI_MODEL_URL=${AI_MODEL_URL}
      - AI_MODEL_AUTH_USERNAME=${AI_MODEL_AUTH_USERNAME}
      - AI_MODEL_AUTH_PASSWORD=${AI_MODEL_AUTH_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - TALLY_WEBHOOK_SECRET=${TALLY_WEBHOOK_SECRET}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: celery -A celery_app worker --loglevel=info
    networks:
      - internal_network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:3000:3000"  # Allow external access for frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      - HOSTNAME=0.0.0.0
      - PORT=3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - internal_network

volumes:
  postgres_data:

networks:
  internal_network:
    driver: bridge
    internal: false  # Allow external access for frontend 