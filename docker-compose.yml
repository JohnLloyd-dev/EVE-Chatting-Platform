services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: adam2025man
      POSTGRES_PASSWORD: adam2025
      POSTGRES_DB: chatting_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U adam2025man -d chatting_platform && psql -U adam2025man -d chatting_platform -c 'SELECT 1;'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache/Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend (with integrated AI model)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://adam2025man:adam2025@postgres:5432/chatting_platform
      - REDIS_URL=redis://redis:6379/0
      - HF_HOME=/app/.cache/huggingface
      - AI_MODEL_CACHE_DIR=/app/.cache/huggingface
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512,expandable_segments:True
      - TOKENIZERS_PARALLELISM=false
      - TRANSFORMERS_OFFLINE=0
    volumes:
      - ./backend:/app
      - ./backend/.cache/huggingface:/app/.cache/huggingface
    deploy:
      resources:
        limits:
          memory: 12G
        reservations:
          memory: 8G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker removed - AI model now integrated into backend
  # No separate worker needed for real-time chat

  # AI Server functionality now integrated into backend

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://204.12.233.105:8001
      - HOSTNAME=0.0.0.0
      - PORT=3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
